{
	"info": {
		"_postman_id": "6f3fff2f-fcac-4fcc-8bfc-191888e10bcb",
		"name": "BookList",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User creation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n          \r\n       \"firstName\":\"Giannis\",\r\n       \"lastName\":\"Antetokoumpo\",\r\n       \"password\":\"1234\",\r\n        \"country\":\"Greece\",\r\n        \"username\":\"TheGreekFreak\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:8080/sign-up",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"sign-up"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Each Json has valid keys\", function () {\r",
							"  var data = JSON.parse(responseBody);\r",
							"  data.forEach(function(item) {\r",
							"      pm.expect(item).to.have.all.keys('id', 'firstName', 'lastName', \r",
							"      'registrationDate', 'password', 'country', 'username', 'books', 'authorities');\r",
							"  });\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"const firstIdAvailable = response.filter((user) => user.id > 0);\r",
							"const firstUserToEliminate = response.filter((user) => user.username === \"TheGreekFreak\");\r",
							"\r",
							"var UserToEliminate = firstUserToEliminate[0];\r",
							"var AvailableUser = firstIdAvailable[0]; //This is a user that I already have in my DB\r",
							"pm.globals.set(\"UserId\", AvailableUser.id);\r",
							"pm.globals.set(\"Username\", AvailableUser.username);\r",
							"pm.globals.set(\"UserIdToEliminate\", UserToEliminate.id);\r",
							"pm.globals.set(\"UsernameToEliminate\", UserToEliminate.username);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT User Non-Authenticated",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n          \r\n       \"firstName\":\"Giannis\",\r\n       \"lastName\":\"Antetokoumpo\",\r\n       \"password\":\"12345\",\r\n        \"country\":\"Greece\",\r\n        \"username\":\"NBAChampBaby\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:8080/users/:UserId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":UserId"
					],
					"variable": [
						{
							"key": "UserId",
							"value": "{{UserId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Signin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Json has valid keys\", function () {\r",
							"  var data = JSON.parse(responseBody);\r",
							"        pm.expect(data).to.have.all.keys('token'); \r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"\r",
							"\r",
							"pm.globals.set(\"Authentication\", response.token);\r",
							"postman.setGlobalVariable('currentDate', (new Date()).toISOString());\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{Username}}\",\r\n    \"password\": \"1234\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:8080/signin",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"signin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{Authentication}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"name\":\"Blood of Elves\",\r\n        \"description\":\"First novel about Geralt of Rivia and Ciri\",\r\n        \"publisher\":\"Editorial Planeta\",\r\n        \"author\":\"Andrzej Sapkowski\",\r\n        \"isbn\":\"45882\",\r\n        \"publishedDate\":\"{{currentDate}}\"\r\n    }"
				},
				"url": {
					"raw": "http://localhost:8080/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create book Old",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.globals.set('OldestDate', '1985-06-21')"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{Authentication}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"name\":\"Skeleton Crew\",\r\n        \"description\":\"Collection of tales\",\r\n        \"publisher\":\"Editorial Planeta\",\r\n        \"author\":\"Stephen King\",\r\n        \"isbn\":\"45857\",\r\n        \"publishedDate\":\"1985-06-21\"\r\n    }"
				},
				"url": {
					"raw": "http://localhost:8080/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create category Fantasy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{Authentication}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fantasy\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:8080/categories",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create category Horror",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{Authentication}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Horror\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:8080/categories",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Each Json has valid keys\", function () {\r",
							"  var data = JSON.parse(responseBody);\r",
							"  data.forEach(function(item) {\r",
							"      pm.expect(item).to.have.all.keys('id', 'name', 'description', \r",
							"      'publisher', 'author', 'isbn', 'publishedDate', 'categories'); \r",
							"  });\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"const firstIdAvailable = response.filter((book) => book.id > 0);\r",
							"\r",
							"var AvailableBook = firstIdAvailable[0];\r",
							"var FantasyBook = firstIdAvailable[firstIdAvailable.length - 2];\r",
							"var HorrorBook = firstIdAvailable[firstIdAvailable.length - 1];\r",
							"pm.globals.set(\"BookId\", AvailableBook.id);\r",
							"pm.globals.set(\"FantasyId\", FantasyBook.id);\r",
							"pm.globals.set(\"HorrorId\", HorrorBook.id);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:8080/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Each Json has valid keys\", function () {\r",
							"  var data = JSON.parse(responseBody);\r",
							"  data.forEach(function(item) {\r",
							"      pm.expect(item).to.have.all.keys('id', 'name'); \r",
							"  });\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"const firstIdAvailable = response.filter((category) => category.id > 0);\r",
							"\r",
							"var AvailableCategory = firstIdAvailable[0];\r",
							"pm.globals.set(\"CategoryId\", AvailableCategory.id);\r",
							"var FantasyCategory = firstIdAvailable[firstIdAvailable.length - 2];\r",
							"var HorrorCategory = firstIdAvailable[firstIdAvailable.length - 1];\r",
							"pm.globals.set(\"FantasyCategory\", FantasyCategory.id);\r",
							"pm.globals.set(\"HorrorCategory\", HorrorCategory.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/categories",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT AddCategoryToBook Fantasy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{Authentication}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:8080/books/:BookId/category/:CategoryId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"books",
						":BookId",
						"category",
						":CategoryId"
					],
					"variable": [
						{
							"key": "BookId",
							"value": "{{FantasyId}}"
						},
						{
							"key": "CategoryId",
							"value": "{{FantasyCategory}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT AddCategoryToBook Horror",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{Authentication}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:8080/books/:BookId/category/:CategoryId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"books",
						":BookId",
						"category",
						":CategoryId"
					],
					"variable": [
						{
							"key": "BookId",
							"value": "{{HorrorId}}"
						},
						{
							"key": "CategoryId",
							"value": "{{HorrorCategory}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Oldest book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Each Json has valid keys\", function () {\r",
							"  var data = JSON.parse(responseBody);\r",
							"      pm.expect(data).to.have.all.keys('name', 'description', 'author', 'publishedDate', 'categories'); \r",
							"});\r",
							"\r",
							"pm.test(\"This is the oldes book\", function () {\r",
							"    var data = JSON.parse(responseBody);\r",
							"      pm.expect(data.publishedDate).to.equal('1985-06-21'); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:8080/books/oldest",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"books",
						"oldest"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Newest books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Newest book is here\", function () {\r",
							"  var data = JSON.parse(responseBody);\r",
							"      pm.expect(data[0]).to.equal('Blood of Elves');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:8080/books/newest",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"books",
						"newest"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Books By Author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Authors are present\", function () {\r",
							"  var data = JSON.parse(responseBody);\r",
							"      pm.expect(data).to.have.all.keys('Andrzej Sapkowski', 'Stephen King'); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:8080/books/authors",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"books",
						"authors"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Books By Category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Categories are present\", function () {\r",
							"  var data = JSON.parse(responseBody);\r",
							"      pm.expect(data).to.have.all.keys('Horror', 'Fantasy'); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:8080/books/categories",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"books",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Books Wrong Adress",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 405\", function () {\r",
							"    pm.response.to.have.status(405);\r",
							"});\r",
							"postman.setNextRequest(\"DELETE Book NonExistent\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{Authentication}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"name\":\"The Last Wish\",\r\n        \"description\":\"Collection of stories about Geralt of Rivia\",\r\n        \"publisher\":\"Editorial Planeta\",\r\n        \"author\":\"Andrzej Sapkowski\",\r\n        \"isbn\":\"45882\",\r\n        \"publishedDate\":\"1993\"\r\n    }"
				},
				"url": {
					"raw": "http://localhost:8080/books/mock",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"books",
						"mock"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{Authentication}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"name\":\"The Sword of Destiny\",\r\n        \"description\":\"Second collection of stories about Geralt of Rivia\",\r\n        \"publisher\":\"Editorial Planeta\",\r\n        \"author\":\"Andrzej Sapkowski\",\r\n        \"isbn\":\"45883\",\r\n        \"publishedDate\": \"2012-03-19\"\r\n    }"
				},
				"url": {
					"raw": "http://localhost:8080/books/:BookId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"books",
						":BookId"
					],
					"variable": [
						{
							"key": "BookId",
							"value": "{{BookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT AddBookToUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{Authentication}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:8080/users/:UserId/book/:BookId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":UserId",
						"book",
						":BookId"
					],
					"variable": [
						{
							"key": "UserId",
							"value": "{{UserId}}"
						},
						{
							"key": "BookId",
							"value": "{{BookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT User NonExistent",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.expect(response.error).to.eql(\"Bad Request\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{Authentication}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n          \r\n       \"firstName\":\"Karim\",\r\n       \"lastName\":\"Abdul Jabbar\",\r\n       \"password\":\"1234\",\r\n        \"country\":\"US\",\r\n        \"username\":\"IRuledThemAll\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:8080/users/:NonExistentId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":NonExistentId"
					],
					"variable": [
						{
							"key": "NonExistentId",
							"value": "{{NonExistentId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Book NonExistent",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.expect(response.error).to.eql(\"Bad Request\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{Authentication}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"name\":\"The Sword of Destiny\",\r\n        \"description\":\"Second ollection of stories about Geralt of Rivia\",\r\n        \"publisher\":\"Editorial Planeta\",\r\n        \"author\":\"Andrzej Sapkowski\",\r\n        \"isbn\":\"45883\",\r\n        \"publishedDate\":\"1995\"\r\n    }"
				},
				"url": {
					"raw": "http://localhost:8080/books/:NonExistentId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"books",
						":NonExistentId"
					],
					"variable": [
						{
							"key": "NonExistentId",
							"value": "{{NonExistentId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE Book NonExistent",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.expect(response.error).to.eql(\"Bad Request\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{Authentication}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"name\":\"The Sword of Destiny\",\r\n        \"description\":\"Second ollection of stories about Geralt of Rivia\",\r\n        \"publisher\":\"Editorial Planeta\",\r\n        \"author\":\"Andrzej Sapkowski\",\r\n        \"isbn\":\"45883\",\r\n        \"publishedDate\":\"1995\"\r\n    }"
				},
				"url": {
					"raw": "http://localhost:8080/books/:NonExistentId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"books",
						":NonExistentId"
					],
					"variable": [
						{
							"key": "NonExistentId",
							"value": "{{NonExistentId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE Category NonExistent",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.expect(response.error).to.eql(\"Bad Request\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{Authentication}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"name\":\"The Sword of Destiny\",\r\n        \"description\":\"Second ollection of stories about Geralt of Rivia\",\r\n        \"publisher\":\"Editorial Planeta\",\r\n        \"author\":\"Andrzej Sapkowski\",\r\n        \"isbn\":\"45883\",\r\n        \"publishedDate\":\"1995\"\r\n    }"
				},
				"url": {
					"raw": "http://localhost:8080/categories/:NonExistentId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"categories",
						":NonExistentId"
					],
					"variable": [
						{
							"key": "NonExistentId",
							"value": "{{NonExistentId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE User NonExistent",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.expect(response.error).to.eql(\"Bad Request\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{Authentication}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"name\":\"The Sword of Destiny\",\r\n        \"description\":\"Second ollection of stories about Geralt of Rivia\",\r\n        \"publisher\":\"Editorial Planeta\",\r\n        \"author\":\"Andrzej Sapkowski\",\r\n        \"isbn\":\"45883\",\r\n        \"publishedDate\":\"1995\"\r\n    }"
				},
				"url": {
					"raw": "http://localhost:8080/users/:NonExistentId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":NonExistentId"
					],
					"variable": [
						{
							"key": "NonExistentId",
							"value": "{{NonExistentId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"postman.setNextRequest(\"DELETE User\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{Authentication}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"name\":\"The Sword of Destiny\",\r\n        \"description\":\"Second ollection of stories about Geralt of Rivia\",\r\n        \"publisher\":\"Editorial Planeta\",\r\n        \"author\":\"Andrzej Sapkowski\",\r\n        \"isbn\":\"45883\",\r\n        \"publishedDate\":\"1995\"\r\n    }"
				},
				"url": {
					"raw": "http://localhost:8080/books/:BookId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"books",
						":BookId"
					],
					"variable": [
						{
							"key": "BookId",
							"value": "{{BookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE User NonAuthorized",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{Authentication}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"name\":\"The Sword of Destiny\",\r\n        \"description\":\"Second ollection of stories about Geralt of Rivia\",\r\n        \"publisher\":\"Editorial Planeta\",\r\n        \"author\":\"Andrzej Sapkowski\",\r\n        \"isbn\":\"45883\",\r\n        \"publishedDate\":\"1995\"\r\n    }"
				},
				"url": {
					"raw": "http://localhost:8080/users/:userId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{UserId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT User AddAuthority",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{Authentication}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n       \"name\": \"ROLE_ADMIN\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:8080/users/:UserId/permissions",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":UserId",
						"permissions"
					],
					"variable": [
						{
							"key": "UserId",
							"value": "{{UserId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{Authentication}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"name\":\"The Sword of Destiny\",\r\n        \"description\":\"Second ollection of stories about Geralt of Rivia\",\r\n        \"publisher\":\"Editorial Planeta\",\r\n        \"author\":\"Andrzej Sapkowski\",\r\n        \"isbn\":\"45883\",\r\n        \"publishedDate\":\"1995\"\r\n    }"
				},
				"url": {
					"raw": "http://localhost:8080/users/:userId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{UserIdToEliminate}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE Category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{Authentication}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"name\":\"The Sword of Destiny\",\r\n        \"description\":\"Second ollection of stories about Geralt of Rivia\",\r\n        \"publisher\":\"Editorial Planeta\",\r\n        \"author\":\"Andrzej Sapkowski\",\r\n        \"isbn\":\"45883\",\r\n        \"publishedDate\":\"1995\"\r\n    }"
				},
				"url": {
					"raw": "http://localhost:8080/categories/:CategoryId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"categories",
						":CategoryId"
					],
					"variable": [
						{
							"key": "CategoryId",
							"value": "{{CategoryId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}